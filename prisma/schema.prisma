datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Albums {
  id                Int      @id @default(autoincrement())
  name              String
  release_date      String?
  info              String?
  label_id          Int?
  producer_id       Int?
  front_cover_path  String?
  back_cover_path   String?
  albumWriters      Album_Writers[]
  albumGenres       Album_Genres[]
  albumMoods        Album_Moods[]
  albumTags         Album_Tags[]
  albumRatings      Album_Ratings?
  albumListenHistory Album_Listen_History[]
}

model Single {
  id                Int      @id @default(autoincrement())
  name              String
  release_date      String?
  info              String?
  label_id          Int?
  producer_id       Int?
  front_cover_path  String?
  back_cover_path   String?
  a_side_track_id   Int?
  b_side_track_id   Int?
  aSideTrack        Tracks? @relation("ASideTracks", fields: [a_side_track_id], references: [id])
  bSideTrack        Tracks? @relation("BSideTracks", fields: [b_side_track_id], references: [id])
  singleGenres      Single_Genres[]
  singleMoods       Single_Moods[]
  singleTags        Single_Tags[]
  singleListenHistory Single_Listen_History[]
}

model Compilations {
  id           Int      @id @default(autoincrement())
  name         String
  info         String?
  cover_path   String?
  compilationGenres   Compilation_Genres[]
  compilationMoods    Compilation_Moods[]
  compilationTags     Compilation_Tags[]
  compilationListenHistory Compilation_Listen_History[]
}

model Tracks {
  id           Int      @id @default(autoincrement())
  track_name   String
  track_path   String
  aSideSingles Single[] @relation("ASideTracks")
  bSideSingles Single[] @relation("BSideTracks")
}

model Artists {
  id               Int      @id @default(autoincrement())
  artist_logo_path String?
  artist_name      String
  active_from      String?
  active_to        String?
}

model Writers {
  writer_id   Int      @id @default(autoincrement())
  writer_name String
  albumWriters Album_Writers[]
}

model Album_Writers {
  album_id  Int
  writer_id Int
  @@id([album_id, writer_id])
  album     Albums  @relation(fields: [album_id], references: [id])
  writer    Writers @relation(fields: [writer_id], references: [writer_id])
}

model Genres {
  id    Int    @id @default(autoincrement())
  name  String @unique
  albumGenres     Album_Genres[]
  singleGenres    Single_Genres[]
  compilationGenres Compilation_Genres[]
}

model Album_Genres {
  album_id Int
  genre_id Int
  @@id([album_id, genre_id])
  album    Albums @relation(fields: [album_id], references: [id])
  genre    Genres @relation(fields: [genre_id], references: [id])
}

model Single_Genres {
  single_id Int
  genre_id  Int
  @@id([single_id, genre_id])
  single    Single @relation(fields: [single_id], references: [id])
  genre     Genres @relation(fields: [genre_id], references: [id])
}

model Compilation_Genres {
  compilation_id Int
  genre_id       Int
  @@id([compilation_id, genre_id])
  compilation    Compilations @relation(fields: [compilation_id], references: [id])
  genre          Genres       @relation(fields: [genre_id], references: [id])
}

model Moods {
  id   Int    @id @default(autoincrement())
  name String @unique
  albumMoods     Album_Moods[]
  singleMoods    Single_Moods[]
  compilationMoods Compilation_Moods[]
}

model Album_Moods {
  album_id Int
  mood_id  Int
  @@id([album_id, mood_id])
  album    Albums @relation(fields: [album_id], references: [id])
  mood     Moods  @relation(fields: [mood_id], references: [id])
}

model Single_Moods {
  single_id Int
  mood_id   Int
  @@id([single_id, mood_id])
  single    Single @relation(fields: [single_id], references: [id])
  mood      Moods  @relation(fields: [mood_id], references: [id])
}

model Compilation_Moods {
  compilation_id Int
  mood_id        Int
  @@id([compilation_id, mood_id])
  compilation    Compilations @relation(fields: [compilation_id], references: [id])
  mood           Moods        @relation(fields: [mood_id], references: [id])
}

model Tags {
  id   Int    @id @default(autoincrement())
  name String @unique
  albumTags     Album_Tags[]
  singleTags    Single_Tags[]
  compilationTags Compilation_Tags[]
}

model Album_Tags {
  album_id Int
  tag_id   Int
  @@id([album_id, tag_id])
  album    Albums @relation(fields: [album_id], references: [id])
  tag      Tags   @relation(fields: [tag_id], references: [id])
}

model Single_Tags {
  single_id Int
  tag_id    Int
  @@id([single_id, tag_id])
  single    Single @relation(fields: [single_id], references: [id])
  tag       Tags   @relation(fields: [tag_id], references: [id])
}

model Compilation_Tags {
  compilation_id Int
  tag_id         Int
  @@id([compilation_id, tag_id])
  compilation    Compilations @relation(fields: [compilation_id], references: [id])
  tag            Tags         @relation(fields: [tag_id], references: [id])
}

model Album_Ratings {
  album_id             Int @id
  general_rating       Int?
  technical_proficency Int?
  concept              Int?
  historical_impact    Int?
  song_enjoyability    Int?
  concistency          Int?
  personal_impact      Int?
  music_quality        Int?
  lyrics               Int?
  album                Albums @relation(fields: [album_id], references: [id])
}

model Album_Listen_History {
  listen_id       Int      @id @default(autoincrement())
  album_id        Int
  listen_timestamp DateTime @default(now()) @map("listen_timestamp") // SQLite TEXT для дати/часу можна мапити до DateTime
  album           Albums   @relation(fields: [album_id], references: [id])
  @@map("Album_Listen_History") // Щоб ім'я таблиці у БД було таким самим
}

model Single_Listen_History {
  listen_id        Int      @id @default(autoincrement())
  single_id        Int
  listen_timestamp DateTime @default(now()) @map("listen_timestamp")
  single           Single   @relation(fields: [single_id], references: [id])
  @@map("Single_Listen_History")
}

model Compilation_Listen_History {
  listen_id        Int      @id @default(autoincrement())
  compilation_id   Int
  listen_timestamp DateTime @default(now()) @map("listen_timestamp")
  compilation      Compilations @relation(fields: [compilation_id], references: [id])
  @@map("Compilation_Listen_History")
}