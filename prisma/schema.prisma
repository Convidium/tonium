datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

model records {
  record_id          Int     @id @default(autoincrement())
  record_type        String  @map("record_type")
  record_name        String  @map("record_name")
  record_artist      Int?    @map("record_artist")
  record_date        String? @map("record_date")
  record_info        String? @map("record_info")
  record_label       String? @map("record_label")
  record_producer    String? @map("record_producer")
  record_cover_path  String? @map("record_cover_path")
  record_backcover_path String? @map("record_backcover_path")
  record_back_cover_path String? @map("record_back_cover_path")
  artists            artists? @relation(fields: [record_artist], references: [artist_id])
  record_genres      record_genres[]
  record_moods       record_moods[]
  song_files         song_files[]
  recent_listened_records recent_listened_records[]

  @@map("records")
}

model artists {
  artist_id       Int         @id @default(autoincrement())
  artist_name     String      @unique @map("artist_name")
  artist_bio      String?     @map("artist_bio")
  artist_logo_path String?     @map("artist_logo_path")
  artist_bg_path  String?     @map("artist_bg_path")
  records         records[]
  song_files      song_files[] // Додано зворотнє відношення

  @@map("artists")
}

model genres {
  genre_id Int @id @default(autoincrement())
  genre_name String @unique @map("genre_name")
  record_genres record_genres[]
  song_genres song_genres[]

  @@map("genres")
}

model moods {
  mood_id Int @id @default(autoincrement())
  mood_name String @unique @map("mood_name")
  record_moods record_moods[]
  song_moods song_moods[]

  @@map("moods")
}

model record_genres {
  record_id Int
  genre_id Int
  records records @relation(fields: [record_id], references: [record_id])
  genres genres @relation(fields: [genre_id], references: [genre_id])

  @@id([record_id, genre_id])
  @@map("record_genres")
}

model record_moods {
  record_id Int
  mood_id Int
  records records @relation(fields: [record_id], references: [record_id])
  moods moods @relation(fields: [mood_id], references: [mood_id])

  @@id([record_id, mood_id])
  @@map("record_moods")
}

model song_files {
  song_id Int @id @default(autoincrement())
  album_id Int? @map("album_id")
  song_name String @map("song_name")
  song_artist Int? @map("song_artist")
  song_info String? @map("song_info")
  song_audio_path String? @map("song_audio_path")
  track_number Int? @map("track_number")
  records records? @relation(fields: [album_id], references: [record_id])
  artists artists? @relation(fields: [song_artist], references: [artist_id])
  song_genres song_genres[]
  song_moods song_moods[]

  @@map("song_files")
}

model song_genres {
  song_id Int
  genre_id Int
  song_files song_files @relation(fields: [song_id], references: [song_id])
  genres genres @relation(fields: [genre_id], references: [genre_id])

  @@id([song_id, genre_id])
  @@map("song_genres")
}

model song_moods {
  song_id Int
  mood_id Int
  song_files song_files @relation(fields: [song_id], references: [song_id])
  moods moods @relation(fields: [mood_id], references: [mood_id])

  @@id([song_id, mood_id])
  @@map("song_moods")
}

model recent_listened_records {
  user_id Int
  record_id Int
  listened_at DateTime? @default(now()) @map("listened_at")
  records records @relation(fields: [record_id], references: [record_id])

  @@id([user_id, record_id])
  @@map("recent_listened_records")
}